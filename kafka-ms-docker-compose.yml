version: '3.4'
services:
  mysql-ms-dbs:
    image: mysql:8.0
    container_name: mysql-ms-dbs
    restart: always
    ports:
      - "3307:3306"
    networks:
      - kafka-network
    environment:
      MYSQL_ROOT_PASSWORD: root
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-uroot", "-proot" ]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - persistence-dbs:/var/lib/mysql

  zookeeper:
    image: zookeeper:3.4.9
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - kafka-network
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  kafka-broker-1:
    image: obsidiandynamics/kafka
    container_name: kafka-broker-1
    networks:
      - kafka-network
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:19092,DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka-broker-1:19092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-broker-2:
    image: obsidiandynamics/kafka
    container_name: kafka-broker-2
    networks:
      - kafka-network
    ports:
      - "9093:9093"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:29092,DOCKER_EXTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka-broker-2:29092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9093 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-broker-3:
    image: obsidiandynamics/kafka
    container_name: kafka-broker-3
    networks:
      - kafka-network
    ports:
      - "9094:9094"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:39092,DOCKER_EXTERNAL://:9094
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka-broker-3:39092,DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost 9094 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  #  following are the spring boot utility microservices
  k8s-kafka-aepc-ms-config-service:
    image: placidenduwayo1/k8s-kafka-aepc-ms-config-service:latest
    container_name: k8s-kafka-aepc-ms-config-service
    build:
      context: ./K8s-Kafka-AEPC-Back/k8s-kafka-aepc-ms-config-service
      dockerfile: Dockerfile
    ports:
      - "8480:8480"
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://k8s-kafka-aepc-ms-config-service:8480" ]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - kafka-network

  k8s-kafka-aepc-ms-registry-service:
    image: placidenduwayo1/k8s-kafka-aepc-ms-registry-service:latest
    container_name: k8s-kafka-aepc-ms-registry-service
    build:
      context: ./K8s-Kafka-AEPC-Back/k8s-kafka-aepc-ms-registry-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - kafka-network
    depends_on:
      k8s-kafka-aepc-ms-config-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://k8s-kafka-aepc-ms-registry-service:8761" ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s

  k8s-kafka-aepc-bs-ms-address:
    image: placidenduwayo1/k8s-kafka-aepc-bs-ms-address:latest
    container_name: k8s-kafka-aepc-bs-ms-address
    build:
      context: ./K8s-Kafka-AEPC-Back/k8s-kafka-aepc-clean-archi-bs-ms-address
      dockerfile: Dockerfile
    ports:
      - "8481:8481"
    depends_on:
      mysql-ms-dbs:
        condition: service_healthy
      k8s-kafka-aepc-ms-registry-service:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - kafka-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:19092,kafka:29092,kafka:39092

  k8s-kafka-aepc-bs-ms-employee:
    image: placidenduwayo1/k8s-kafka-aepc-bs-ms-employee:latest
    container_name: k8s-kafka-aepc-bs-ms-employee
    build:
      context: ./K8s-Kafka-AEPC-Back/k8s-kafka-aepc-clean-archi-bs-ms-employee
      dockerfile: Dockerfile
    ports:
      - "8482:8482"
    depends_on:
      mysql-ms-dbs:
        condition: service_healthy
      k8s-kafka-aepc-ms-registry-service:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - kafka-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:19092,kafka:29092,kafka:39092

  k8s-kafka-aepc-bs-ms-company:
    image: placidenduwayo1/k8s-kafka-aepc-bs-ms-company:latest
    container_name: k8s-kafka-aepc-bs-ms-company
    build:
      context: ./K8s-Kafka-AEPC-Back/k8s-kafka-aepc-clean-archi-bs-ms-company
      dockerfile: Dockerfile
    ports:
      - "8483:8483"
    depends_on:
      mysql-ms-dbs:
        condition: service_healthy
      k8s-kafka-aepc-ms-registry-service:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - kafka-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:19092,kafka:29092,kafka:39092

  k8s-kafka-aepc-bs-ms-project:
    image: placidenduwayo1/k8s-kafka-aepc-bs-ms-project:latest
    container_name: k8s-kafka-aepc-bs-ms-project
    build:
      context: ./K8s-Kafka-AEPC-Back/k8s-kafka-aepc-clean-archi-bs-ms-project
      dockerfile: Dockerfile
    ports:
      - "8484:8484"
    depends_on:
      mysql-ms-dbs:
        condition: service_healthy
      k8s-kafka-aepc-ms-registry-service:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - kafka-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:19092,kafka:29092,kafka:39092

  k8s-kafka-aepc-gateway-service:
    image: placidenduwayo1/k8s-kafka-aepc-gateway-service:latest
    container_name: k8s-kafka-aepc-gateway-service
    build:
      context: ./K8s-Kafka-AEPC-Back/k8s-kafka-aepc-gateway-service
      dockerfile: Dockerfile
    ports:
      - "8485:8485"
    networks:
      - kafka-network
    depends_on:
      k8s-kafka-aepc-ms-registry-service:
        condition: service_healthy
networks:
  kafka-network:
volumes:
  persistence-dbs:
